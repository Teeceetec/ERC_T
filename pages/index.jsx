import React, { useEffect, useState, useRef } from "react";
import Head from "next/head";
import { ERC_CONTRACT_ADDRESS, ERC_CONTRACT_ABI } from "../constants/index";

import styles from "../styles/Home.module.css";
import Web3Modal from "web3modal";
import { Contract, utils, providers } from "ethers";

export default function Home() {
  const [walletConnected, setWalletConnected] = useState(false);
  const [loading, setLoading] = useState(false);
  const [totalAmount, setTotalAmount] = useState(0);
  const [recipientAddress, setRecipientAddress] = useState("");
  const [recipientAmount, setRecipientAmount] = useState(0);
  const [recipientBalance, setRecipientBalance] = useState("")

  const web3ModalRef = useRef(null);

  const recipientAddressChange = (e) => {
    setRecipientAddress(e.target.value);
  };

  const recipientAmountChange = (e) => {
    setRecipientAmount(e.target.value);
  };

  const recipieentBalanceChange = (e) => {
    setRecipientBalance(e.target.value);
  };

  const transferTokens = async () => {
    if (recipientAddress === "" || recipientAmount === 0) {
      alert("Please enter a recipient address and amount");
      return;
    }

    try {
      const signer = await getProviderOrSigner(true);
      const contract = new Contract(
        ERC_CONTRACT_ADDRESS,
        ERC_CONTRACT_ABI,
        signer,
      );
      
      const tx = await contract.transfer(
        recipientAddress,
        utils.parseEther(recipientAmount),
      );
      setLoading(true);
      await tx.wait();
      console.log("Transfer successful");
      window.alert("Transfer successful!!");
      setLoading(false);
    } catch (error) {
      console.log(error);
    }
  };


   const getBalance = async () => {

      if(recipientBalance === "" || !recipientAddress) {
        window.alert("Please enter a recipient address");
      }
        try{
          const provider = await getProviderOrSigner(false);
          const contract = new Contract(
            ERC_CONTRACT_ADDRESS,
            ERC_CONTRACT_ABI,
            provider,);

          const balance = await contract.balanceOf(recipientAddress);
          setRecipientBalance(utils.formatEther(balance));
        } catch (err) {
          console.log(err);
        }
   }

   const Amount = async () => {
     try {
       const provider = await getProviderOrSigner();
       const contract = new Contract(
         ERC_CONTRACT_ADDRESS,
         ERC_CONTRACT_ABI,
         provider,
       );
       const total = await contract.getTotalSupply();
       setTotalAmount(utils.formatEther(total));
     } catch (error) {
       console.log(error);
     }
   };

  const getProviderOrSigner = async (needSigner = false) => {
    //connect to wallet
    const provider = await web3ModalRef.current.connect();
    if(!provider){
      throw new Error("No provider");
    }
    const web3Provider = new providers.Web3Provider(provider);

    //If users is not connected to the network let them know!!
    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 11155111) {
      window.alert("Please connect to the Sepolia Testnet");
      throw new Error("Please connect to the Sepolia Testnet");
    }
    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  };

  const connectWallet = async () => {
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    if (!walletConnected) {
      web3ModalRef.current = new Web3Modal({
        network: "sepolia",
        providerOptions: {},
        disableInjectedProvider: false,
      });
      connectWallet();
    }
  }, [walletConnected]);

  const renderButton = () => {
    if (!walletConnected) {
      return (
        <button className={styles.button} onClick={connectWallet}>
          Connect Wallet
        </button>
      );
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>ERC20</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>ERC20 TOKEN</h1>
        <div>
          <h3>TOTAL_SUPPLY : {totalAmount}</h3>
          <label>
            Recipient Address:
            <input
              type="text"
              value={recipientAddress}
              onChange={recipientAddressChange}
            />
          </label>
          <label>
            Amount:
            <input
              type="text"
              value={recipientAmount}
              onChange={recipientAmountChange}
            />
          </label>

          <button onClick={transferTokens}>Transfer</button>
        </div>
         <div>
           <label>
              Recipient Balance:
              <input
                type="text"
                value={recipientBalance}
                onChange={recipieentBalanceChange} />
            </label>
           <button onClick={getBalance}>Get Balance</button>
         </div>
       
        <div>
          <h3>AddressBalance: {recipientBalance}</h3>
        </div>
        

        <p>Connect your wallet by clicking this button</p>
        {renderButton()}
      </main>
    </div>
  );
}
